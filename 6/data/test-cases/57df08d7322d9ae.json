{"uid":"57df08d7322d9ae","name":"test_contact_request_baseline","fullName":"tests.test_contact_request.TestContacRequest#test_contact_request_baseline","historyId":"3cd119d78ef69e09ff41bc563f5442ff","time":{"start":1728393056079,"stop":1728393056079,"duration":0},"status":"broken","statusMessage":"_pytest.fixtures.FixtureLookupError: ('recover_network_fn', <FixtureRequest for <Coroutine test_contact_request_baseline>>)","statusTrace":"file /home/runner/work/status-cli-tests/status-cli-tests/tests/test_contact_request.py, line 11\n      @pytest.mark.asyncio\n      async def test_contact_request_baseline(self, recover_network_fn):\n          timeout_secs = 120\n          reset_network_in_secs = 30\n          num_contact_requests = NUM_CONTACT_REQUESTS\n\n          # start all nodes\n          nodes: list[tuple[StatusNode, StatusNode, int]] = []\n          for index in range(num_contact_requests):\n              first_node = StatusNode()\n              first_node.start()\n              second_node = StatusNode()\n              second_node.start()\n              first_node.wait_fully_started()\n              second_node.wait_fully_started()\n              nodes.append((first_node, second_node, index))\n\n          tasks = []\n          for first_node, second_node, index in nodes:\n              tasks.append(asyncio.create_task(self.send_and_wait_for_message((first_node, second_node), index, timeout_secs)))\n\n          done, pending = await asyncio.wait(tasks, timeout=reset_network_in_secs)\n          if pending:\n              if recover_network_fn:\n                  # after `reset_network_in_secs` the network will recover and MVDS will eventually deliver the messages\n                  recover_network_fn()\n              done2, _ = await asyncio.wait(pending)\n              done.update(done2)\n          else:\n              print(\"no pending tasks\")\n\n          missing_contact_requests = []\n          for task in done:\n              if task.exception():\n                  print(f\"Task raised an exception: {task.exception()}\")\n              else:\n                  res = task.result()\n                  if res is not None:\n                      missing_contact_requests.append(res)\n\n          if missing_contact_requests:\n              formatted_missing_requests = [f\"Timestamp: {ts}, Message: {msg}, ID: {mid}\" for ts, msg, mid in missing_contact_requests]\n              raise AssertionError(\n                  f\"{len(missing_contact_requests)} contact requests out of {num_contact_requests} didn't reach the peer node: \"\n                  + \"\\n\".join(formatted_missing_requests)\n              )\nE       fixture 'recover_network_fn' not found\n>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, clear_open_nodes, doctest_namespace, event_loop, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, save_node_logs_on_fail, set_allure_env_variables, start_1_node, start_2_nodes, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, worker_id\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/status-cli-tests/status-cli-tests/tests/test_contact_request.py:11","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"set_allure_env_variables","time":{"start":1728392616175,"stop":1728392616175,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop","time":{"start":1728393056080,"stop":1728393056081,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"save_node_logs_on_fail","time":{"start":1728393056081,"stop":1728393056081,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_open_nodes","time":{"start":1728393056081,"stop":1728393056081,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"_pytest.fixtures.FixtureLookupError: ('recover_network_fn', <FixtureRequest for <Coroutine test_contact_request_baseline>>)","statusTrace":"file /home/runner/work/status-cli-tests/status-cli-tests/tests/test_contact_request.py, line 11\n      @pytest.mark.asyncio\n      async def test_contact_request_baseline(self, recover_network_fn):\n          timeout_secs = 120\n          reset_network_in_secs = 30\n          num_contact_requests = NUM_CONTACT_REQUESTS\n\n          # start all nodes\n          nodes: list[tuple[StatusNode, StatusNode, int]] = []\n          for index in range(num_contact_requests):\n              first_node = StatusNode()\n              first_node.start()\n              second_node = StatusNode()\n              second_node.start()\n              first_node.wait_fully_started()\n              second_node.wait_fully_started()\n              nodes.append((first_node, second_node, index))\n\n          tasks = []\n          for first_node, second_node, index in nodes:\n              tasks.append(asyncio.create_task(self.send_and_wait_for_message((first_node, second_node), index, timeout_secs)))\n\n          done, pending = await asyncio.wait(tasks, timeout=reset_network_in_secs)\n          if pending:\n              if recover_network_fn:\n                  # after `reset_network_in_secs` the network will recover and MVDS will eventually deliver the messages\n                  recover_network_fn()\n              done2, _ = await asyncio.wait(pending)\n              done.update(done2)\n          else:\n              print(\"no pending tasks\")\n\n          missing_contact_requests = []\n          for task in done:\n              if task.exception():\n                  print(f\"Task raised an exception: {task.exception()}\")\n              else:\n                  res = task.result()\n                  if res is not None:\n                      missing_contact_requests.append(res)\n\n          if missing_contact_requests:\n              formatted_missing_requests = [f\"Timestamp: {ts}, Message: {msg}, ID: {mid}\" for ts, msg, mid in missing_contact_requests]\n              raise AssertionError(\n                  f\"{len(missing_contact_requests)} contact requests out of {num_contact_requests} didn't reach the peer node: \"\n                  + \"\\n\".join(formatted_missing_requests)\n              )\nE       fixture 'recover_network_fn' not found\n>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, clear_open_nodes, doctest_namespace, event_loop, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, save_node_logs_on_fail, set_allure_env_variables, start_1_node, start_2_nodes, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, worker_id\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/status-cli-tests/status-cli-tests/tests/test_contact_request.py:11","steps":[],"attachments":[{"uid":"f7734582ccbddb76","name":"log","source":"f7734582ccbddb76.txt","type":"text/plain","size":324}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"save_node_logs_on_fail::0","time":{"start":1728393056083,"stop":1728393056083,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_open_nodes::0","time":{"start":1728393056084,"stop":1728393056084,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::2","time":{"start":1728393056084,"stop":1728393056084,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_close_event_loop","time":{"start":1728393056084,"stop":1728393056084,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_provide_clean_event_loop","time":{"start":1728393056084,"stop":1728393056085,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"set_allure_env_variables::0","time":{"start":1728394812937,"stop":1728394812937,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"asyncio"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_contact_request"},{"name":"subSuite","value":"TestContacRequest"},{"name":"host","value":"fv-az575-63"},{"name":"thread","value":"75915-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_contact_request"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["asyncio"]},"source":"57df08d7322d9ae.json","parameterValues":[]}